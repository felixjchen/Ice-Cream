{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport { WarningFilled16 } from '@carbon/icons-react';\nimport { settings } from 'carbon-components';\nimport cx from 'classnames';\nimport Downshift, { useSelect } from 'downshift';\nimport isEqual from 'lodash.isequal';\nimport PropTypes from 'prop-types';\nimport React, { useRef, useState } from 'react';\nimport ListBox, { PropTypes as ListBoxPropTypes } from '../ListBox';\nimport { sortingPropTypes } from './MultiSelectPropTypes';\nimport { defaultItemToString } from './tools/itemToString';\nimport { defaultSortItems, defaultCompareItems } from './tools/sorting';\nimport { useSelection } from '../../internal/Selection';\nimport setupGetInstanceId from '../../tools/setupGetInstanceId';\nimport { mapDownshiftProps } from '../../tools/createPropAdapter';\nvar prefix = settings.prefix;\n\nvar noop = function noop() {};\n\nvar getInstanceId = setupGetInstanceId();\nvar _useSelect$stateChang = useSelect.stateChangeTypes,\n    ItemClick = _useSelect$stateChang.ItemClick,\n    MenuBlur = _useSelect$stateChang.MenuBlur,\n    MenuKeyDownArrowDown = _useSelect$stateChang.MenuKeyDownArrowDown,\n    MenuKeyDownArrowUp = _useSelect$stateChang.MenuKeyDownArrowUp,\n    MenuKeyDownEnter = _useSelect$stateChang.MenuKeyDownEnter,\n    MenuKeyDownEscape = _useSelect$stateChang.MenuKeyDownEscape,\n    MenuKeyDownSpaceButton = _useSelect$stateChang.MenuKeyDownSpaceButton,\n    ToggleButtonClick = _useSelect$stateChang.ToggleButtonClick;\nvar MultiSelect = /*#__PURE__*/React.forwardRef(function MultiSelect(_ref, ref) {\n  var _cx, _cx4;\n\n  var containerClassName = _ref.className,\n      id = _ref.id,\n      items = _ref.items,\n      itemToString = _ref.itemToString,\n      titleText = _ref.titleText,\n      helperText = _ref.helperText,\n      label = _ref.label,\n      type = _ref.type,\n      size = _ref.size,\n      disabled = _ref.disabled,\n      initialSelectedItems = _ref.initialSelectedItems,\n      sortItems = _ref.sortItems,\n      compareItems = _ref.compareItems,\n      light = _ref.light,\n      invalid = _ref.invalid,\n      invalidText = _ref.invalidText,\n      useTitleInItem = _ref.useTitleInItem,\n      translateWithId = _ref.translateWithId,\n      downshiftProps = _ref.downshiftProps,\n      open = _ref.open,\n      selectionFeedback = _ref.selectionFeedback,\n      onChange = _ref.onChange,\n      direction = _ref.direction;\n\n  var _useRef = useRef(getInstanceId()),\n      multiSelectInstanceId = _useRef.current;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      highlightedIndex = _useState2[0],\n      setHighlightedIndex = _useState2[1];\n\n  var _useState3 = useState(open),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isOpen = _useState4[0],\n      setIsOpen = _useState4[1];\n\n  var _useState5 = useState(open),\n      _useState6 = _slicedToArray(_useState5, 2),\n      prevOpenProp = _useState6[0],\n      setPrevOpenProp = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      topItems = _useState8[0],\n      setTopItems = _useState8[1];\n\n  var _useSelection = useSelection({\n    disabled: disabled,\n    initialSelectedItems: initialSelectedItems,\n    onChange: onChange\n  }),\n      controlledSelectedItems = _useSelection.selectedItems,\n      onItemChange = _useSelection.onItemChange,\n      clearSelection = _useSelection.clearSelection;\n\n  var _useSelect = useSelect(mapDownshiftProps(_objectSpread(_objectSpread({}, downshiftProps), {}, {\n    highlightedIndex: highlightedIndex,\n    isOpen: isOpen,\n    itemToString: itemToString,\n    onStateChange: onStateChange,\n    selectedItem: controlledSelectedItems,\n    items: items\n  }))),\n      getToggleButtonProps = _useSelect.getToggleButtonProps,\n      getLabelProps = _useSelect.getLabelProps,\n      getMenuProps = _useSelect.getMenuProps,\n      getItemProps = _useSelect.getItemProps,\n      selectedItems = _useSelect.selectedItem;\n  /**\n   * programmatically control this `open` prop\n   */\n\n\n  if (prevOpenProp !== open) {\n    setIsOpen(open);\n    setPrevOpenProp(open);\n  }\n\n  var inline = type === 'inline';\n  var wrapperClasses = cx(\"\".concat(prefix, \"--multi-select__wrapper\"), \"\".concat(prefix, \"--list-box__wrapper\"), (_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--multi-select__wrapper--inline\"), inline), _defineProperty(_cx, \"\".concat(prefix, \"--list-box__wrapper--inline\"), inline), _defineProperty(_cx, \"\".concat(prefix, \"--multi-select__wrapper--inline--invalid\"), inline && invalid), _defineProperty(_cx, \"\".concat(prefix, \"--list-box__wrapper--inline--invalid\"), inline && invalid), _cx));\n  var titleClasses = cx(\"\".concat(prefix, \"--label\"), _defineProperty({}, \"\".concat(prefix, \"--label--disabled\"), disabled));\n  var helperId = !helperText ? undefined : \"multiselect-helper-text-\".concat(multiSelectInstanceId);\n  var fieldLabelId = \"multiselect-field-label-\".concat(multiSelectInstanceId);\n  var helperClasses = cx(\"\".concat(prefix, \"--form__helper-text\"), _defineProperty({}, \"\".concat(prefix, \"--form__helper-text--disabled\"), disabled));\n  var className = cx(\"\".concat(prefix, \"--multi-select\"), containerClassName, (_cx4 = {}, _defineProperty(_cx4, \"\".concat(prefix, \"--multi-select--invalid\"), invalid), _defineProperty(_cx4, \"\".concat(prefix, \"--multi-select--inline\"), inline), _defineProperty(_cx4, \"\".concat(prefix, \"--multi-select--selected\"), selectedItems && selectedItems.length > 0), _defineProperty(_cx4, \"\".concat(prefix, \"--list-box--up\"), direction === 'top'), _cx4));\n  var sortOptions = {\n    selectedItems: controlledSelectedItems,\n    itemToString: itemToString,\n    compareItems: compareItems,\n    locale: 'en'\n  };\n\n  if (selectionFeedback === 'fixed') {\n    sortOptions.selectedItems = [];\n  } else if (selectionFeedback === 'top-after-reopen') {\n    sortOptions.selectedItems = topItems;\n  }\n\n  function onStateChange(changes) {\n    if (changes.isOpen && !isOpen) {\n      setTopItems(controlledSelectedItems);\n    }\n\n    var type = changes.type;\n\n    switch (type) {\n      case ItemClick:\n      case MenuKeyDownSpaceButton:\n      case MenuKeyDownEnter:\n        onItemChange(changes.selectedItem);\n        break;\n\n      case MenuKeyDownArrowDown:\n      case MenuKeyDownArrowUp:\n        setHighlightedIndex(changes.highlightedIndex);\n        break;\n\n      case MenuBlur:\n      case MenuKeyDownEscape:\n        setIsOpen(false);\n        setHighlightedIndex(changes.highlightedIndex);\n        break;\n\n      case ToggleButtonClick:\n        setIsOpen(changes.isOpen || false);\n        setHighlightedIndex(changes.highlightedIndex);\n        break;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: wrapperClasses\n  }, titleText && /*#__PURE__*/React.createElement(\"label\", _extends({\n    className: titleClasses\n  }, getLabelProps()), titleText), /*#__PURE__*/React.createElement(ListBox, {\n    type: type,\n    size: size,\n    className: className,\n    disabled: disabled,\n    light: light,\n    invalid: invalid,\n    invalidText: invalidText,\n    isOpen: isOpen,\n    id: id\n  }, invalid && /*#__PURE__*/React.createElement(WarningFilled16, {\n    className: \"\".concat(prefix, \"--list-box__invalid-icon\")\n  }), /*#__PURE__*/React.createElement(\"button\", _extends({\n    type: \"button\",\n    ref: ref,\n    className: \"\".concat(prefix, \"--list-box__field\"),\n    disabled: disabled,\n    \"aria-disabled\": disabled\n  }, getToggleButtonProps()), selectedItems.length > 0 && /*#__PURE__*/React.createElement(ListBox.Selection, {\n    clearSelection: !disabled ? clearSelection : noop,\n    selectionCount: selectedItems.length,\n    translateWithId: translateWithId,\n    disabled: disabled\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    id: fieldLabelId,\n    className: \"\".concat(prefix, \"--list-box__label\")\n  }, label), /*#__PURE__*/React.createElement(ListBox.MenuIcon, {\n    isOpen: isOpen,\n    translateWithId: translateWithId\n  })), /*#__PURE__*/React.createElement(ListBox.Menu, _extends({\n    \"aria-multiselectable\": \"true\"\n  }, getMenuProps()), isOpen && sortItems(items, sortOptions).map(function (item, index) {\n    var itemProps = getItemProps({\n      item: item\n    });\n    var itemText = itemToString(item);\n    var isChecked = selectedItems.filter(function (selected) {\n      return isEqual(selected, item);\n    }).length > 0;\n    return /*#__PURE__*/React.createElement(ListBox.MenuItem, _extends({\n      key: itemProps.id,\n      isActive: isChecked,\n      isHighlighted: highlightedIndex === index,\n      title: itemText\n    }, itemProps), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(prefix, \"--checkbox-wrapper\")\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      title: useTitleInItem ? itemText : null,\n      className: \"\".concat(prefix, \"--checkbox-label\"),\n      \"data-contained-checkbox-state\": isChecked,\n      id: \"\".concat(itemProps.id, \"__checkbox\")\n    }, itemText)));\n  }))), !inline && !invalid && helperText && /*#__PURE__*/React.createElement(\"div\", {\n    id: helperId,\n    className: helperClasses\n  }, helperText));\n});\nMultiSelect.displayName = 'MultiSelect';\nMultiSelect.propTypes = _objectSpread(_objectSpread({}, sortingPropTypes), {}, {\n  /**\n   * Disable the control\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Specify a custom `id`\n   */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * We try to stay as generic as possible here to allow individuals to pass\n   * in a collection of whatever kind of data structure they prefer\n   */\n  items: PropTypes.array.isRequired,\n\n  /**\n   * Allow users to pass in arbitrary items from their collection that are\n   * pre-selected\n   */\n  initialSelectedItems: PropTypes.array,\n\n  /**\n   * Helper function passed to downshift that allows the library to render a\n   * given item to a string label. By default, it extracts the `label` field\n   * from a given item to serve as the item label in the list.\n   */\n  itemToString: PropTypes.func,\n\n  /**\n   * Generic `label` that will be used as the textual representation of what\n   * this field is for\n   */\n  label: PropTypes.node.isRequired,\n\n  /**\n   * Specify the locale of the control. Used for the default `compareItems`\n   * used for sorting the list of items in the control.\n   */\n  locale: PropTypes.string,\n\n  /**\n   * `onChange` is a utility for this controlled component to communicate to a\n   * consuming component what kind of internal state changes are occuring.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Specify 'inline' to create an inline multi-select.\n   */\n  type: PropTypes.oneOf(['default', 'inline']),\n\n  /**\n   * Specify the size of the ListBox. Currently supports either `sm`, `lg` or `xl` as an option.\n   */\n  size: ListBoxPropTypes.ListBoxSize,\n\n  /**\n   * Specify title to show title on hover\n   */\n  useTitleInItem: PropTypes.bool,\n\n  /**\n   * `true` to use the light version.\n   */\n  light: PropTypes.bool,\n\n  /**\n   * Is the current selection invalid?\n   */\n  invalid: PropTypes.bool,\n\n  /**\n   * If invalid, what is the error?\n   */\n  invalidText: PropTypes.string,\n\n  /**\n   * Initialize the component with an open(`true`)/closed(`false`) menu.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Callback function for translating ListBoxMenuIcon SVG title\n   */\n  translateWithId: PropTypes.func,\n\n  /**\n   * Specify feedback (mode) of the selection.\n   * `top`: selected item jumps to top\n   * `fixed`: selected item stays at it's position\n   * `top-after-reopen`: selected item jump to top after reopen dropdown\n   */\n  selectionFeedback: PropTypes.oneOf(['top', 'fixed', 'top-after-reopen']),\n\n  /**\n   * Additional props passed to Downshift\n   */\n  downshiftProps: PropTypes.shape(Downshift.propTypes),\n\n  /**\n   * Specify the direction of the multiselect dropdown. Can be either top or bottom.\n   */\n  direction: PropTypes.oneOf(['top', 'bottom'])\n});\nMultiSelect.defaultProps = {\n  compareItems: defaultCompareItems,\n  disabled: false,\n  locale: 'en',\n  itemToString: defaultItemToString,\n  initialSelectedItems: [],\n  sortItems: defaultSortItems,\n  type: 'default',\n  light: false,\n  title: false,\n  open: false,\n  selectionFeedback: 'top-after-reopen',\n  direction: 'bottom'\n};\nexport default MultiSelect;","map":null,"metadata":{},"sourceType":"module"}