{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport cx from 'classnames';\nimport Downshift from 'downshift';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { settings } from 'carbon-components';\nimport { Checkmark16, WarningFilled16 } from '@carbon/icons-react';\nimport ListBox, { PropTypes as ListBoxPropTypes } from '../ListBox';\nimport { match, keys } from '../../internal/keyboard';\nimport setupGetInstanceId from '../../tools/setupGetInstanceId';\nimport { mapDownshiftProps } from '../../tools/createPropAdapter';\nvar prefix = settings.prefix;\n\nvar defaultItemToString = function defaultItemToString(item) {\n  if (typeof item === 'string') {\n    return item;\n  }\n\n  return item && item.label;\n};\n\nvar defaultShouldFilterItem = function defaultShouldFilterItem() {\n  return true;\n};\n\nvar getInputValue = function getInputValue(props, state) {\n  if (props.selectedItem) {\n    return props.itemToString(props.selectedItem);\n  } // TODO: consistent `initialSelectedItem` behavior with other listbox components in v11\n\n\n  if (props.initialSelectedItem) {\n    return props.itemToString(props.initialSelectedItem);\n  }\n\n  return state.inputValue || '';\n};\n\nvar findHighlightedIndex = function findHighlightedIndex(_ref, inputValue) {\n  var items = _ref.items,\n      itemToString = _ref.itemToString;\n\n  if (!inputValue) {\n    return -1;\n  }\n\n  var searchValue = inputValue.toLowerCase();\n\n  for (var i = 0; i < items.length; i++) {\n    var item = itemToString(items[i]).toLowerCase();\n\n    if (item.indexOf(searchValue) !== -1) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n\nvar getInstanceId = setupGetInstanceId();\n\nvar ComboBox = /*#__PURE__*/function (_React$Component) {\n  _inherits(ComboBox, _React$Component);\n\n  var _super = _createSuper(ComboBox);\n\n  _createClass(ComboBox, null, [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, state) {\n      var prevSelectedItem = state.prevSelectedItem,\n          doneInitialSelectedItem = state.doneInitialSelectedItem;\n      var selectedItem = nextProps.selectedItem;\n\n      if (!doneInitialSelectedItem || prevSelectedItem !== selectedItem) {\n        return {\n          doneInitialSelectedItem: true,\n          prevSelectedItem: selectedItem,\n          inputValue: getInputValue(nextProps, state)\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  function ComboBox(props) {\n    var _this;\n\n    _classCallCheck(this, ComboBox);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"filterItems\", function (items, itemToString, inputValue) {\n      return items.filter(function (item) {\n        return _this.props.shouldFilterItem({\n          item: item,\n          itemToString: itemToString,\n          inputValue: inputValue\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOnChange\", function (selectedItem) {\n      if (_this.props.onChange) {\n        _this.props.onChange({\n          selectedItem: selectedItem\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOnInputValueChange\", function (inputValue) {\n      var onInputChange = _this.props.onInputChange;\n\n      _this.setState(function () {\n        return {\n          // Default to empty string if we have a false-y `inputValue`\n          inputValue: inputValue || ''\n        };\n      }, function () {\n        if (onInputChange) {\n          onInputChange(inputValue);\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSelectionClear\", function () {\n      var _this$textInput;\n\n      if ((_this$textInput = _this.textInput) === null || _this$textInput === void 0 ? void 0 : _this$textInput.current) {\n        _this.textInput.current.focus();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOnStateChange\", function (newState, _ref2) {\n      var setHighlightedIndex = _ref2.setHighlightedIndex;\n\n      if (Object.prototype.hasOwnProperty.call(newState, 'inputValue')) {\n        var inputValue = newState.inputValue;\n\n        var items = _this.filterItems(_this.props.items, _this.props.itemToString, inputValue);\n\n        setHighlightedIndex(findHighlightedIndex(_objectSpread(_objectSpread({}, _this.props), {}, {\n          items: items\n        }), inputValue));\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onToggleClick\", function (isOpen) {\n      return function (event) {\n        if (event.target === _this.textInput.current && isOpen) {\n          event.preventDownshiftDefault = true;\n          event.persist();\n        }\n      };\n    });\n\n    _this.textInput = /*#__PURE__*/React.createRef();\n    _this.comboBoxInstanceId = getInstanceId();\n    _this.state = {\n      inputValue: getInputValue(props, {})\n    };\n    return _this;\n  }\n\n  _createClass(ComboBox, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          containerClassName = _this$props.className,\n          disabled = _this$props.disabled,\n          id = _this$props.id,\n          items = _this$props.items,\n          itemToString = _this$props.itemToString,\n          itemToElement = _this$props.itemToElement,\n          titleText = _this$props.titleText,\n          helperText = _this$props.helperText,\n          placeholder = _this$props.placeholder,\n          initialSelectedItem = _this$props.initialSelectedItem,\n          selectedItem = _this$props.selectedItem,\n          ariaLabel = _this$props.ariaLabel,\n          translateWithId = _this$props.translateWithId,\n          invalid = _this$props.invalid,\n          invalidText = _this$props.invalidText,\n          light = _this$props.light,\n          type = _this$props.type,\n          size = _this$props.size,\n          shouldFilterItem = _this$props.shouldFilterItem,\n          onChange = _this$props.onChange,\n          onInputChange = _this$props.onInputChange,\n          downshiftProps = _this$props.downshiftProps,\n          direction = _this$props.direction,\n          rest = _objectWithoutProperties(_this$props, [\"className\", \"disabled\", \"id\", \"items\", \"itemToString\", \"itemToElement\", \"titleText\", \"helperText\", \"placeholder\", \"initialSelectedItem\", \"selectedItem\", \"ariaLabel\", \"translateWithId\", \"invalid\", \"invalidText\", \"light\", \"type\", \"size\", \"shouldFilterItem\", \"onChange\", \"onInputChange\", \"downshiftProps\", \"direction\"]);\n\n      var className = cx(\"\".concat(prefix, \"--combo-box\"), containerClassName, _defineProperty({}, \"\".concat(prefix, \"--list-box--up\"), direction === 'top'));\n      var titleClasses = cx(\"\".concat(prefix, \"--label\"), _defineProperty({}, \"\".concat(prefix, \"--label--disabled\"), disabled));\n      var comboBoxHelperId = !helperText ? undefined : \"combobox-helper-text-\".concat(this.comboBoxInstanceId);\n      var helperClasses = cx(\"\".concat(prefix, \"--form__helper-text\"), _defineProperty({}, \"\".concat(prefix, \"--form__helper-text--disabled\"), disabled));\n      var wrapperClasses = cx(\"\".concat(prefix, \"--list-box__wrapper\"));\n      var inputClasses = cx(\"\".concat(prefix, \"--text-input\"), _defineProperty({}, \"\".concat(prefix, \"--text-input--empty\"), !this.state.inputValue)); // needs to be Capitalized for react to render it correctly\n\n      var ItemToElement = itemToElement;\n      return /*#__PURE__*/React.createElement(Downshift, _extends({}, mapDownshiftProps(downshiftProps), {\n        onChange: this.handleOnChange,\n        onInputValueChange: this.handleOnInputValueChange,\n        onStateChange: this.handleOnStateChange,\n        inputValue: this.state.inputValue || '',\n        itemToString: itemToString,\n        initialSelectedItem: initialSelectedItem,\n        inputId: id,\n        selectedItem: selectedItem\n      }), function (_ref3) {\n        var getToggleButtonProps = _ref3.getToggleButtonProps,\n            getInputProps = _ref3.getInputProps,\n            getItemProps = _ref3.getItemProps,\n            getLabelProps = _ref3.getLabelProps,\n            isOpen = _ref3.isOpen,\n            inputValue = _ref3.inputValue,\n            selectedItem = _ref3.selectedItem,\n            highlightedIndex = _ref3.highlightedIndex,\n            clearSelection = _ref3.clearSelection,\n            toggleMenu = _ref3.toggleMenu,\n            getMenuProps = _ref3.getMenuProps;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: wrapperClasses\n        }, titleText && /*#__PURE__*/React.createElement(\"label\", _extends({\n          className: titleClasses\n        }, getLabelProps()), titleText), /*#__PURE__*/React.createElement(ListBox, {\n          className: className,\n          disabled: disabled,\n          invalid: invalid,\n          \"aria-label\": ariaLabel,\n          invalidText: invalidText,\n          isOpen: isOpen,\n          light: light,\n          size: size\n        }, /*#__PURE__*/React.createElement(ListBox.Field, getToggleButtonProps({\n          disabled: disabled,\n          onClick: _this2.onToggleClick(isOpen)\n        }), /*#__PURE__*/React.createElement(\"input\", _extends({\n          disabled: disabled,\n          className: inputClasses,\n          type: \"text\",\n          tabIndex: \"0\",\n          \"aria-autocomplete\": \"list\",\n          ref: _this2.textInput\n        }, rest, getInputProps({\n          disabled: disabled,\n          placeholder: placeholder,\n          onKeyDown: function onKeyDown(event) {\n            if (match(event, keys.Space)) {\n              event.stopPropagation();\n            }\n\n            if (match(event, keys.Enter)) {\n              toggleMenu();\n            }\n          }\n        }))), invalid && /*#__PURE__*/React.createElement(WarningFilled16, {\n          className: \"\".concat(prefix, \"--list-box__invalid-icon\")\n        }), inputValue && /*#__PURE__*/React.createElement(ListBox.Selection, {\n          clearSelection: clearSelection,\n          translateWithId: translateWithId,\n          disabled: disabled,\n          onClearSelection: _this2.handleSelectionClear\n        }), /*#__PURE__*/React.createElement(ListBox.MenuIcon, {\n          isOpen: isOpen,\n          translateWithId: translateWithId\n        })), isOpen && /*#__PURE__*/React.createElement(ListBox.Menu, getMenuProps({\n          'aria-label': ariaLabel\n        }), _this2.filterItems(items, itemToString, inputValue).map(function (item, index) {\n          var itemProps = getItemProps({\n            item: item,\n            index: index\n          });\n          return /*#__PURE__*/React.createElement(ListBox.MenuItem, _extends({\n            key: itemProps.id,\n            isActive: selectedItem === item,\n            tabIndex: \"-1\",\n            isHighlighted: highlightedIndex === index || selectedItem && selectedItem.id === item.id || false,\n            title: itemToElement ? item.text : itemToString(item)\n          }, itemProps), itemToElement ? /*#__PURE__*/React.createElement(ItemToElement, _extends({\n            key: itemProps.id\n          }, item)) : itemToString(item), selectedItem === item && /*#__PURE__*/React.createElement(Checkmark16, {\n            className: \"\".concat(prefix, \"--list-box__menu-item__selected-icon\")\n          }));\n        }))), helperText && !invalid && /*#__PURE__*/React.createElement(\"div\", {\n          id: comboBoxHelperId,\n          className: helperClasses\n        }, helperText));\n      });\n    }\n  }]);\n\n  return ComboBox;\n}(React.Component);\n\n_defineProperty(ComboBox, \"propTypes\", {\n  /**\n   * 'aria-label' of the ListBox component.\n   */\n  ariaLabel: PropTypes.string,\n\n  /**\n   * An optional className to add to the container node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify if the control should be disabled, or not\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Specify a custom `id` for the input\n   */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * Allow users to pass in an arbitrary item or a string (in case their items are an array of strings)\n   * from their collection that are pre-selected\n   */\n  initialSelectedItem: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n\n  /**\n   * We try to stay as generic as possible here to allow individuals to pass\n   * in a collection of whatever kind of data structure they prefer\n   */\n  items: PropTypes.array.isRequired,\n\n  /**\n   * Helper function passed to downshift that allows the library to render a\n   * given item to a string label. By default, it extracts the `label` field\n   * from a given item to serve as the item label in the list\n   */\n  itemToString: PropTypes.func,\n\n  /**\n   * Optional function to render items as custom components instead of strings.\n   * Defaults to null and is overriden by a getter\n   */\n  itemToElement: PropTypes.func,\n\n  /**\n   * `onChange` is a utility for this controlled component to communicate to a\n   * consuming component when a specific dropdown item is selected.\n   * @param {{ selectedItem }}\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Used to provide a placeholder text node before a user enters any input.\n   * This is only present if the control has no items selected\n   */\n  placeholder: PropTypes.string.isRequired,\n\n  /**\n   * Specify your own filtering logic by passing in a `shouldFilterItem`\n   * function that takes in the current input and an item and passes back\n   * whether or not the item should be filtered.\n   */\n  shouldFilterItem: PropTypes.func,\n\n  /**\n   * Specify if the currently selected value is invalid.\n   */\n  invalid: PropTypes.bool,\n\n  /**\n   * Message which is displayed if the value is invalid.\n   */\n  invalidText: PropTypes.string,\n\n  /**\n   * For full control of the selection\n   */\n  selectedItem: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n\n  /**\n   * Specify a custom translation function that takes in a message identifier\n   * and returns the localized string for the message\n   */\n  translateWithId: PropTypes.func,\n\n  /**\n   * Currently supports either the default type, or an inline variant\n   */\n  type: ListBoxPropTypes.ListBoxType,\n\n  /**\n   * Specify the size of the ListBox. Currently supports either `sm`, `lg` or `xl` as an option.\n   */\n  size: ListBoxPropTypes.ListBoxSize,\n\n  /**\n   * Callback function to notify consumer when the text input changes.\n   * This provides support to change available items based on the text.\n   * @param {string} inputText\n   */\n  onInputChange: PropTypes.func,\n\n  /**\n   * should use \"light theme\" (white background)?\n   */\n  light: PropTypes.bool,\n\n  /**\n   * Additional props passed to Downshift\n   */\n  downshiftProps: PropTypes.shape(Downshift.propTypes),\n\n  /**\n   * Specify the direction of the combobox dropdown. Can be either top or bottom.\n   */\n  direction: PropTypes.oneOf(['top', 'bottom']),\n  titleText: PropTypes.string,\n  helperText: PropTypes.string\n});\n\n_defineProperty(ComboBox, \"defaultProps\", {\n  disabled: false,\n  itemToString: defaultItemToString,\n  itemToElement: null,\n  shouldFilterItem: defaultShouldFilterItem,\n  type: 'default',\n  ariaLabel: 'Choose an item',\n  light: false,\n  direction: 'bottom'\n});\n\nexport { ComboBox as default };","map":null,"metadata":{},"sourceType":"module"}