{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { settings } from 'carbon-components';\nimport { Close20 } from '@carbon/icons-react';\nimport toggleClass from '../../tools/toggleClass';\nimport Button from '../Button';\nimport deprecate from '../../prop-types/deprecate';\nimport requiredIfGivenPropIsTruthy from '../../prop-types/requiredIfGivenPropIsTruthy';\nimport wrapFocus, { elementOrParentIsFloatingMenu } from '../../internal/wrapFocus';\nimport setupGetInstanceId from '../../tools/setupGetInstanceId';\nvar prefix = settings.prefix;\nvar getInstanceId = setupGetInstanceId();\n\nvar Modal = /*#__PURE__*/function (_Component) {\n  _inherits(Modal, _Component);\n\n  var _super = _createSuper(Modal);\n\n  function Modal() {\n    var _this;\n\n    _classCallCheck(this, Modal);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"button\", /*#__PURE__*/React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"outerModal\", /*#__PURE__*/React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"innerModal\", /*#__PURE__*/React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"startTrap\", /*#__PURE__*/React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"endTrap\", /*#__PURE__*/React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"modalInstanceId\", \"modal-\".concat(getInstanceId()));\n\n    _defineProperty(_assertThisInitialized(_this), \"modalLabelId\", \"\".concat(prefix, \"--modal-header__label--\").concat(_this.modalInstanceId));\n\n    _defineProperty(_assertThisInitialized(_this), \"modalHeadingId\", \"\".concat(prefix, \"--modal-header__heading--\").concat(_this.modalInstanceId));\n\n    _defineProperty(_assertThisInitialized(_this), \"modalBodyId\", \"\".concat(prefix, \"--modal-body--\").concat(_this.modalInstanceId));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyDown\", function (evt) {\n      if (_this.props.open) {\n        if (evt.which === 27) {\n          _this.props.onRequestClose(evt);\n        }\n\n        if (evt.which === 13 && _this.props.shouldSubmitOnEnter) {\n          _this.props.onRequestSubmit(evt);\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleMousedown\", function (evt) {\n      if (_this.innerModal.current && !_this.innerModal.current.contains(evt.target) && !elementOrParentIsFloatingMenu(evt.target, _this.props.selectorsFloatingMenus)) {\n        _this.props.onRequestClose(evt);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleBlur\", function (_ref) {\n      var oldActiveNode = _ref.target,\n          currentActiveNode = _ref.relatedTarget;\n      var _this$props = _this.props,\n          open = _this$props.open,\n          selectorsFloatingMenus = _this$props.selectorsFloatingMenus;\n\n      if (open && currentActiveNode && oldActiveNode) {\n        var bodyNode = _this.innerModal.current;\n        var startTrapNode = _this.startTrap.current;\n        var endTrapNode = _this.endTrap.current;\n        wrapFocus({\n          bodyNode: bodyNode,\n          startTrapNode: startTrapNode,\n          endTrapNode: endTrapNode,\n          currentActiveNode: currentActiveNode,\n          oldActiveNode: oldActiveNode,\n          selectorsFloatingMenus: selectorsFloatingMenus\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"initialFocus\", function (focusContainerElement) {\n      var containerElement = focusContainerElement || _this.innerModal.current;\n      var primaryFocusElement = containerElement ? containerElement.querySelector(_this.props.selectorPrimaryFocus) : null;\n\n      if (primaryFocusElement) {\n        return primaryFocusElement;\n      }\n\n      return _this.button && _this.button.current;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"focusButton\", function (focusContainerElement) {\n      var target = _this.initialFocus(focusContainerElement);\n\n      if (target) {\n        target.focus();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTransitionEnd\", function (evt) {\n      if (evt.target === evt.currentTarget && // Not to handle `onTransitionEnd` on child DOM nodes\n      _this.outerModal.current && _this.outerModal.current.offsetWidth && _this.outerModal.current.offsetHeight && _this.beingOpen) {\n        _this.focusButton(evt.currentTarget);\n\n        _this.beingOpen = false;\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(Modal, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (!prevProps.open && this.props.open) {\n        this.beingOpen = true;\n      } else if (prevProps.open && !this.props.open) {\n        this.beingOpen = false;\n      }\n\n      toggleClass(document.body, \"\".concat(prefix, \"--body--with-modal-open\"), this.props.open);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      toggleClass(document.body, \"\".concat(prefix, \"--body--with-modal-open\"), false);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      toggleClass(document.body, \"\".concat(prefix, \"--body--with-modal-open\"), this.props.open);\n\n      if (!this.props.open) {\n        return;\n      }\n\n      this.focusButton(this.innerModal.current);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _classNames, _classNames3;\n\n      var _this$props2 = this.props,\n          modalHeading = _this$props2.modalHeading,\n          modalLabel = _this$props2.modalLabel,\n          modalAriaLabel = _this$props2.modalAriaLabel,\n          passiveModal = _this$props2.passiveModal,\n          hasForm = _this$props2.hasForm,\n          secondaryButtonText = _this$props2.secondaryButtonText,\n          primaryButtonText = _this$props2.primaryButtonText,\n          open = _this$props2.open,\n          onRequestClose = _this$props2.onRequestClose,\n          onRequestSubmit = _this$props2.onRequestSubmit,\n          onSecondarySubmit = _this$props2.onSecondarySubmit,\n          iconDescription = _this$props2.iconDescription,\n          primaryButtonDisabled = _this$props2.primaryButtonDisabled,\n          danger = _this$props2.danger,\n          alert = _this$props2.alert,\n          selectorPrimaryFocus = _this$props2.selectorPrimaryFocus,\n          selectorsFloatingMenus = _this$props2.selectorsFloatingMenus,\n          shouldSubmitOnEnter = _this$props2.shouldSubmitOnEnter,\n          size = _this$props2.size,\n          hasScrollingContent = _this$props2.hasScrollingContent,\n          other = _objectWithoutProperties(_this$props2, [\"modalHeading\", \"modalLabel\", \"modalAriaLabel\", \"passiveModal\", \"hasForm\", \"secondaryButtonText\", \"primaryButtonText\", \"open\", \"onRequestClose\", \"onRequestSubmit\", \"onSecondarySubmit\", \"iconDescription\", \"primaryButtonDisabled\", \"danger\", \"alert\", \"selectorPrimaryFocus\", \"selectorsFloatingMenus\", \"shouldSubmitOnEnter\", \"size\", \"hasScrollingContent\"]);\n\n      var onSecondaryButtonClick = onSecondarySubmit ? onSecondarySubmit : onRequestClose;\n      var modalClasses = classNames((_classNames = {}, _defineProperty(_classNames, \"\".concat(prefix, \"--modal\"), true), _defineProperty(_classNames, \"\".concat(prefix, \"--modal-tall\"), !passiveModal), _defineProperty(_classNames, 'is-visible', open), _defineProperty(_classNames, \"\".concat(prefix, \"--modal--danger\"), this.props.danger), _defineProperty(_classNames, this.props.className, this.props.className), _classNames));\n      var containerClasses = classNames(\"\".concat(prefix, \"--modal-container\"), _defineProperty({}, \"\".concat(prefix, \"--modal-container--\").concat(size), size));\n      var contentClasses = classNames(\"\".concat(prefix, \"--modal-content\"), (_classNames3 = {}, _defineProperty(_classNames3, \"\".concat(prefix, \"--modal-content--with-form\"), hasForm), _defineProperty(_classNames3, \"\".concat(prefix, \"--modal-scroll-content\"), hasScrollingContent), _classNames3));\n      var modalButton = /*#__PURE__*/React.createElement(\"button\", {\n        className: \"\".concat(prefix, \"--modal-close\"),\n        type: \"button\",\n        onClick: onRequestClose,\n        title: iconDescription,\n        \"aria-label\": iconDescription,\n        ref: this.button\n      }, /*#__PURE__*/React.createElement(Close20, {\n        \"aria-label\": iconDescription,\n        className: \"\".concat(prefix, \"--modal-close__icon\")\n      }));\n      var ariaLabel = modalLabel || this.props['aria-label'] || modalAriaLabel || modalHeading;\n      var getAriaLabelledBy = modalLabel ? this.modalLabelId : this.modalHeadingId;\n      var hasScrollingContentProps = hasScrollingContent ? {\n        tabIndex: 0,\n        role: 'region',\n        'aria-label': ariaLabel,\n        'aria-labelledby': getAriaLabelledBy\n      } : {};\n      var alertDialogProps = {};\n\n      if (alert && passiveModal) {\n        alertDialogProps.role = 'alert';\n      }\n\n      if (alert && !passiveModal) {\n        alertDialogProps.role = 'alertdialog';\n        alertDialogProps['aria-describedby'] = this.modalBodyId;\n      }\n\n      var modalBody = /*#__PURE__*/React.createElement(\"div\", _extends({\n        ref: this.innerModal,\n        role: \"dialog\"\n      }, alertDialogProps, {\n        className: containerClasses,\n        \"aria-label\": ariaLabel,\n        \"aria-modal\": \"true\",\n        tabIndex: \"-1\"\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(prefix, \"--modal-header\")\n      }, passiveModal && modalButton, modalLabel && /*#__PURE__*/React.createElement(\"h2\", {\n        id: this.modalLabelId,\n        className: \"\".concat(prefix, \"--modal-header__label\")\n      }, modalLabel), /*#__PURE__*/React.createElement(\"h3\", {\n        id: this.modalHeadingId,\n        className: \"\".concat(prefix, \"--modal-header__heading\")\n      }, modalHeading), !passiveModal && modalButton), /*#__PURE__*/React.createElement(\"div\", _extends({\n        id: this.modalBodyId,\n        className: contentClasses\n      }, hasScrollingContentProps, {\n        \"aria-labelledby\": getAriaLabelledBy\n      }), this.props.children), hasScrollingContent && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(prefix, \"--modal-content--overflow-indicator\")\n      }), !passiveModal && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(prefix, \"--modal-footer\")\n      }, /*#__PURE__*/React.createElement(Button, {\n        kind: \"secondary\",\n        onClick: onSecondaryButtonClick\n      }, secondaryButtonText), /*#__PURE__*/React.createElement(Button, {\n        kind: danger ? 'danger' : 'primary',\n        disabled: primaryButtonDisabled,\n        onClick: onRequestSubmit,\n        ref: this.button\n      }, primaryButtonText)));\n      return /*#__PURE__*/React.createElement(\"div\", _extends({}, other, {\n        onKeyDown: this.handleKeyDown,\n        onMouseDown: this.handleMousedown,\n        onBlur: this.handleBlur,\n        className: modalClasses,\n        role: \"presentation\",\n        onTransitionEnd: this.props.open ? this.handleTransitionEnd : undefined,\n        ref: this.outerModal\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        ref: this.startTrap,\n        tabIndex: \"0\",\n        role: \"link\",\n        className: \"\".concat(prefix, \"--visually-hidden\")\n      }, \"Focus sentinel\"), modalBody, /*#__PURE__*/React.createElement(\"span\", {\n        ref: this.endTrap,\n        tabIndex: \"0\",\n        role: \"link\",\n        className: \"\".concat(prefix, \"--visually-hidden\")\n      }, \"Focus sentinel\"));\n    }\n  }]);\n\n  return Modal;\n}(Component);\n\n_defineProperty(Modal, \"propTypes\", _defineProperty({\n  /**\n   * Provide the contents of your Modal\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the modal root node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify whether the modal should be button-less\n   */\n  passiveModal: PropTypes.bool,\n\n  /**\n   * Provide whether the modal content has a form element.\n   * If `true` is used here, non-form child content should have `bx--modal-content__regular-content` class.\n   */\n  hasForm: PropTypes.bool,\n\n  /**\n   * Specify a handler for closing modal.\n   * The handler should care of closing modal, e.g. changing `open` prop.\n   */\n  onRequestClose: PropTypes.func,\n\n  /**\n   * Specify the DOM element ID of the top-level node.\n   */\n  id: PropTypes.string,\n\n  /**\n   * Specify the content of the modal header title.\n   */\n  modalHeading: PropTypes.node,\n\n  /**\n   * Specify the content of the modal header label.\n   */\n  modalLabel: PropTypes.node,\n\n  /**\n   * Specify a label to be read by screen readers on the modal root node\n   */\n  modalAriaLabel: PropTypes.string,\n\n  /**\n   * Specify the text for the secondary button\n   */\n  secondaryButtonText: PropTypes.node,\n\n  /**\n   * Specify the text for the primary button\n   */\n  primaryButtonText: PropTypes.node,\n\n  /**\n   * Specify whether the Modal is currently open\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Specify a handler for \"submitting\" modal.\n   * The handler should care of closing modal, e.g. changing `open` prop, if necessary.\n   */\n  onRequestSubmit: PropTypes.func,\n\n  /**\n   * Specify a handler for keypresses.\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * Provide a description for \"close\" icon that can be read by screen readers\n   */\n  iconDescription: PropTypes.string,\n\n  /**\n   * Specify whether the Button should be disabled, or not\n   */\n  primaryButtonDisabled: PropTypes.bool,\n\n  /**\n   * Specify a handler for the secondary button.\n   * Useful if separate handler from `onRequestClose` is desirable\n   */\n  onSecondarySubmit: PropTypes.func,\n\n  /**\n   * Specify whether the Modal is for dangerous actions\n   */\n  danger: PropTypes.bool,\n\n  /**\n   * Specify whether the Modal is displaying an alert, error or warning\n   * Should go hand in hand with the danger prop.\n   */\n  alert: PropTypes.bool,\n\n  /**\n   * Specify if Enter key should be used as \"submit\" action\n   */\n  shouldSubmitOnEnter: PropTypes.bool,\n\n  /**\n   * Specify CSS selectors that match DOM elements working as floating menus.\n   * Focusing on those elements won't trigger \"focus-wrap\" behavior\n   */\n  selectorsFloatingMenus: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * Specify a CSS selector that matches the DOM element that should\n   * be focused when the Modal opens\n   */\n  selectorPrimaryFocus: PropTypes.string,\n\n  /**\n   * Specify the size variant.\n   */\n  size: PropTypes.oneOf(['xs', 'sm', 'lg']),\n\n  /**\n   * Deprecated; Used for advanced focus-wrapping feature using 3rd party library,\n   * but it's now achieved without a 3rd party library.\n   */\n  focusTrap: deprecate(PropTypes.bool, \"\\nThe prop `focusTrap` for Modal has been deprecated, as the feature of `focusTrap` runs by default.\"),\n\n  /**\n   * Specify whether the modal contains scrolling content\n   */\n  hasScrollingContent: PropTypes.bool\n}, 'aria-label', requiredIfGivenPropIsTruthy('hasScrollingContent', PropTypes.string)));\n\n_defineProperty(Modal, \"defaultProps\", {\n  onRequestClose: function onRequestClose() {},\n  onRequestSubmit: function onRequestSubmit() {},\n  primaryButtonDisabled: false,\n  onKeyDown: function onKeyDown() {},\n  passiveModal: false,\n  iconDescription: 'Close',\n  modalHeading: '',\n  modalLabel: '',\n  selectorPrimaryFocus: '[data-modal-primary-focus]',\n  hasScrollingContent: false\n});\n\nexport { Modal as default };","map":null,"metadata":{},"sourceType":"module"}