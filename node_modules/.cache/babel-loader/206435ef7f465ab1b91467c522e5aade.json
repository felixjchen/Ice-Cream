{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\nimport { ChevronDown16 } from '@carbon/icons-react';\nimport { settings } from 'carbon-components';\nimport { keys, match, matches } from '../../internal/keyboard';\nvar prefix = settings.prefix;\n\nvar Tabs = /*#__PURE__*/function (_React$Component) {\n  _inherits(Tabs, _React$Component);\n\n  var _super = _createSuper(Tabs);\n\n  function Tabs() {\n    var _this;\n\n    _classCallCheck(this, Tabs);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      dropdownHidden: true\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getEnabledTabs\", function () {\n      return React.Children.toArray(_this.props.children).reduce(function (acc, tab, index) {\n        return !tab.props.disabled ? acc.concat(index) : acc;\n      }, []);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getTabAt\", function (index, useFresh) {\n      return !useFresh && _this[\"tab\".concat(index)] || React.Children.toArray(_this.props.children)[index];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setTabAt\", function (index, tabRef) {\n      _this[\"tab\".concat(index)] = tabRef;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTabClick\", function (onSelectionChange) {\n      return function (index, evt) {\n        evt.preventDefault();\n\n        _this.selectTabAt(index, onSelectionChange);\n\n        _this.setState({\n          dropdownHidden: true\n        });\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getDirection\", function (evt) {\n      if (match(evt, keys.ArrowLeft)) {\n        return -1;\n      }\n\n      if (match(evt, keys.ArrowRight)) {\n        return 1;\n      }\n\n      return 0;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getNextIndex\", function (index, direction) {\n      var enabledTabs = _this.getEnabledTabs();\n\n      var nextIndex = Math.max(enabledTabs.indexOf(index) + direction, -1\n      /* For `tab` not found in `enabledTabs` */\n      );\n      var nextIndexLooped = nextIndex >= 0 && nextIndex < enabledTabs.length ? nextIndex : nextIndex - Math.sign(nextIndex) * enabledTabs.length;\n      return enabledTabs[nextIndexLooped];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTabKeyDown\", function (onSelectionChange) {\n      return function (index, evt) {\n        if (matches(evt, [keys.Enter, keys.Space])) {\n          _this.selectTabAt(index, onSelectionChange);\n\n          _this.setState({\n            dropdownHidden: true\n          });\n        }\n\n        if (window.matchMedia('(min-width: 42rem)').matches) {\n          var nextIndex = _this.getNextIndex(index, _this.getDirection(evt));\n\n          var tab = _this.getTabAt(nextIndex);\n\n          if (tab && matches(evt, [keys.ArrowLeft, keys.ArrowRight])) {\n            evt.preventDefault();\n\n            if (_this.props.selectionMode !== 'manual') {\n              _this.selectTabAt(nextIndex, onSelectionChange);\n            }\n\n            if (tab.tabAnchor) {\n              tab.tabAnchor.focus();\n            }\n          }\n        }\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDropdownClick\", function () {\n      _this.setState({\n        dropdownHidden: !_this.state.dropdownHidden\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"selectTabAt\", function (index, onSelectionChange) {\n      if (_this.state.selected !== index) {\n        _this.setState({\n          selected: index\n        });\n\n        if (typeof onSelectionChange === 'function') {\n          onSelectionChange(index);\n        }\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(Tabs, [{\n    key: \"getTabs\",\n    value: function getTabs() {\n      return React.Children.map(this.props.children, function (tab) {\n        return tab;\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          ariaLabel = _this$props.ariaLabel,\n          iconDescription = _this$props.iconDescription,\n          className = _this$props.className,\n          triggerHref = _this$props.triggerHref,\n          role = _this$props.role,\n          type = _this$props.type,\n          onSelectionChange = _this$props.onSelectionChange,\n          selectionMode = _this$props.selectionMode,\n          tabContentClassName = _this$props.tabContentClassName,\n          other = _objectWithoutProperties(_this$props, [\"ariaLabel\", \"iconDescription\", \"className\", \"triggerHref\", \"role\", \"type\", \"onSelectionChange\", \"selectionMode\", \"tabContentClassName\"]);\n      /**\n       * The tab panel acts like a tab panel when the screen is wider, but acts\n       * like a select list when the screen is narrow.  In the wide case we want\n       * to allow the user to use the tab key to set the focus in the tab panel\n       * and then use the left and right arrow keys to navigate the tabs.  In the\n       * narrow case we want to use the tab key to select different options in\n       * the list.\n       *\n       * We set the tab index based on the different states so the browser will treat\n       * the whole tab panel as a single focus component when it looks like a tab\n       * panel and separate components when it looks like a select list.\n       */\n\n\n      var tabsWithProps = this.getTabs().map(function (tab, index) {\n        var tabPanelIndex = index === _this2.state.selected ? 0 : -1;\n        var tabIndex = !_this2.state.dropdownHidden ? 0 : tabPanelIndex;\n        var newTab = /*#__PURE__*/React.cloneElement(tab, {\n          index: index,\n          selected: index === _this2.state.selected,\n          handleTabClick: _this2.handleTabClick(onSelectionChange),\n          tabIndex: tabIndex,\n          ref: function ref(e) {\n            _this2.setTabAt(index, e);\n          },\n          handleTabKeyDown: _this2.handleTabKeyDown(onSelectionChange)\n        });\n        return newTab;\n      });\n      var tabContentWithProps = React.Children.map(tabsWithProps, function (tab) {\n        var _tab$props = tab.props,\n            tabId = _tab$props.id,\n            children = _tab$props.children,\n            selected = _tab$props.selected,\n            TabContent = _tab$props.renderContent;\n        return /*#__PURE__*/React.createElement(TabContent, {\n          id: tabId && \"\".concat(tabId, \"__panel\"),\n          className: tabContentClassName,\n          \"aria-hidden\": !selected,\n          hidden: !selected,\n          selected: selected,\n          \"aria-labelledby\": tabId\n        }, children);\n      });\n      var classes = {\n        tabs: classNames(\"\".concat(prefix, \"--tabs\"), className, _defineProperty({}, \"\".concat(prefix, \"--tabs--container\"), type === 'container')),\n        tablist: classNames(\"\".concat(prefix, \"--tabs__nav\"), _defineProperty({}, \"\".concat(prefix, \"--tabs__nav--hidden\"), this.state.dropdownHidden))\n      };\n      var selectedTab = this.getTabAt(this.state.selected, true);\n      var selectedLabel = selectedTab ? selectedTab.props.label : '';\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", _extends({}, other, {\n        className: classes.tabs,\n        role: role\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        role: \"listbox\",\n        \"aria-label\": ariaLabel,\n        tabIndex: 0,\n        className: \"\".concat(prefix, \"--tabs-trigger\"),\n        onClick: this.handleDropdownClick,\n        onKeyPress: this.handleDropdownClick\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        tabIndex: -1,\n        className: \"\".concat(prefix, \"--tabs-trigger-text\"),\n        href: triggerHref,\n        onClick: this.handleDropdownClick\n      }, selectedLabel), /*#__PURE__*/React.createElement(ChevronDown16, {\n        \"aria-hidden\": \"true\"\n      }, iconDescription && /*#__PURE__*/React.createElement(\"title\", null, iconDescription))), /*#__PURE__*/React.createElement(\"ul\", {\n        role: \"tablist\",\n        className: classes.tablist\n      }, tabsWithProps)), tabContentWithProps);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(_ref, state) {\n      var selected = _ref.selected;\n      var prevSelected = state.prevSelected;\n      return prevSelected === selected ? null : {\n        selected: selected,\n        prevSelected: selected\n      };\n    }\n  }]);\n\n  return Tabs;\n}(React.Component);\n\n_defineProperty(Tabs, \"propTypes\", {\n  /**\n   * Specify the text to be read by screen-readers when visiting the <Tabs>\n   * component\n   */\n  ariaLabel: PropTypes.string,\n\n  /**\n   * Pass in a collection of <Tab> children to be rendered depending on the\n   * currently selected tab\n   */\n  children: PropTypes.node,\n\n  /**\n   * Provide a className that is applied to the root <nav> component for the\n   * <Tabs>\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify whether the Tab content is hidden\n   */\n  hidden: PropTypes.bool,\n\n  /**\n   * By default, this value is \"navigation\". You can also provide an alternate\n   * role if it makes sense from the accessibility-side\n   */\n  role: PropTypes.string.isRequired,\n\n  /**\n   * Provide the type of Tab\n   */\n  type: PropTypes.oneOf(['default', 'container']),\n\n  /**\n   * Optionally provide an `onClick` handler that is invoked when a <Tab> is\n   * clicked\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Optionally provide an `onKeyDown` handler that is invoked when keyed\n   * navigation is triggered\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * Provide an optional handler that is called whenever the selection\n   * changes. This method is called with the index of the tab that was\n   * selected\n   */\n  onSelectionChange: PropTypes.func,\n\n  /**\n   * Provide a string that represents the `href` for the triggered <Tab>\n   */\n  triggerHref: PropTypes.string.isRequired,\n\n  /**\n   * Optionally provide an index for the currently selected <Tab>\n   */\n  selected: PropTypes.number,\n\n  /**\n   * Provide a description that is read out when a user visits the caret icon\n   * for the dropdown menu of items\n   */\n  iconDescription: PropTypes.string.isRequired,\n\n  /**\n   * Provide a className that is applied to the <TabContent> components\n   */\n  tabContentClassName: PropTypes.string,\n\n  /**\n   * Choose whether or not to automatically change selection on focus\n   */\n  selectionMode: PropTypes.oneOf(['automatic', 'manual'])\n});\n\n_defineProperty(Tabs, \"defaultProps\", {\n  iconDescription: 'show menu options',\n  role: 'navigation',\n  type: 'default',\n  triggerHref: '#',\n  selected: 0,\n  ariaLabel: 'listbox',\n  selectionMode: 'automatic'\n});\n\nexport { Tabs as default };","map":null,"metadata":{},"sourceType":"module"}