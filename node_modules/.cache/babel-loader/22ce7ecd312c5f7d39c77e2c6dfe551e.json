{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2016, 2019\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { useMemo, useRef, useState, useEffect } from 'react';\nimport { settings } from 'carbon-components';\nimport Search from '../Search';\nimport setupGetInstanceId from './tools/instanceId';\nimport deprecate from '../../prop-types/deprecate';\nvar prefix = settings.prefix;\nvar getInstanceId = setupGetInstanceId();\nvar translationKeys = {\n  'carbon.table.toolbar.search.label': 'Filter table',\n  'carbon.table.toolbar.search.placeholder': 'Filter table'\n};\n\nvar translateWithId = function translateWithId(id) {\n  return translationKeys[id];\n};\n\nvar TableToolbarSearch = function TableToolbarSearch(_ref) {\n  var _cx;\n\n  var className = _ref.className,\n      searchContainerClass = _ref.searchContainerClass,\n      onChangeProp = _ref.onChange,\n      t = _ref.translateWithId,\n      placeHolderText = _ref.placeHolderText,\n      labelText = _ref.labelText,\n      expandedProp = _ref.expanded,\n      defaultExpanded = _ref.defaultExpanded,\n      defaultValue = _ref.defaultValue,\n      onExpand = _ref.onExpand,\n      persistent = _ref.persistent,\n      persistant = _ref.persistant,\n      id = _ref.id,\n      tabIndex = _ref.tabIndex,\n      rest = _objectWithoutProperties(_ref, [\"className\", \"searchContainerClass\", \"onChange\", \"translateWithId\", \"placeHolderText\", \"labelText\", \"expanded\", \"defaultExpanded\", \"defaultValue\", \"onExpand\", \"persistent\", \"persistant\", \"id\", \"tabIndex\"]);\n\n  var _useRef = useRef(expandedProp !== undefined),\n      controlled = _useRef.current;\n\n  var _useState = useState(defaultExpanded || defaultValue),\n      _useState2 = _slicedToArray(_useState, 2),\n      expandedState = _useState2[0],\n      setExpandedState = _useState2[1];\n\n  var expanded = controlled ? expandedProp : expandedState;\n  var searchRef = useRef(null);\n\n  var _useState3 = useState(defaultValue || ''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      value = _useState4[0],\n      setValue = _useState4[1];\n\n  var uniqueId = useMemo(getInstanceId, []);\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      focusTarget = _useState6[0],\n      setFocusTarget = _useState6[1];\n\n  useEffect(function () {\n    if (focusTarget) {\n      focusTarget.current.querySelector('input').focus();\n      setFocusTarget(null);\n    }\n  }, [focusTarget]);\n  useEffect(function () {\n    if (defaultValue) {\n      onChangeProp('', defaultValue);\n    }\n  }, //eslint-disable-next-line react-hooks/exhaustive-deps\n  []);\n  var searchContainerClasses = cx((_cx = {}, _defineProperty(_cx, searchContainerClass, searchContainerClass), _defineProperty(_cx, \"\".concat(prefix, \"--toolbar-action\"), true), _defineProperty(_cx, \"\".concat(prefix, \"--toolbar-search-container-active\"), expanded), _defineProperty(_cx, \"\".concat(prefix, \"--toolbar-search-container-expandable\"), !persistent || !persistent && !persistant), _defineProperty(_cx, \"\".concat(prefix, \"--toolbar-search-container-persistent\"), persistent || persistant), _cx));\n\n  var handleExpand = function handleExpand(event) {\n    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !expanded;\n\n    if (!controlled && (!persistent || !persistent && !persistant)) {\n      setExpandedState(value);\n\n      if (value && !expanded) {\n        setFocusTarget(searchRef);\n      }\n    }\n\n    if (onExpand) {\n      onExpand(event, value);\n    }\n  };\n\n  var _onClick = function onClick(e) {\n    handleExpand(e, true);\n  };\n\n  var onChange = function onChange(e) {\n    setValue(e.target.value);\n\n    if (onChangeProp) {\n      onChangeProp(e);\n    }\n  };\n\n  var searchExpanded = expanded || persistent;\n  return (\n    /*#__PURE__*/\n    // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n    React.createElement(\"div\", {\n      tabIndex: searchExpanded ? '-1' : tabIndex,\n      ref: searchRef,\n      onKeyDown: function onKeyDown(event) {\n        return _onClick(event);\n      },\n      onClick: function onClick(event) {\n        return _onClick(event);\n      },\n      onFocus: function onFocus(event) {\n        return handleExpand(event, true);\n      },\n      onBlur: function onBlur(event) {\n        return !value && handleExpand(event, false);\n      },\n      className: searchContainerClasses\n    }, /*#__PURE__*/React.createElement(Search, _extends({\n      size: \"sm\",\n      tabIndex: searchExpanded ? tabIndex : '-1',\n      className: className,\n      value: value,\n      id: typeof id !== 'undefined' ? id : uniqueId.toString(),\n      \"aria-hidden\": !searchExpanded,\n      labelText: labelText || t('carbon.table.toolbar.search.label'),\n      placeHolderText: placeHolderText || t('carbon.table.toolbar.search.placeholder'),\n      onChange: onChange\n    }, rest)))\n  );\n};\n\nTableToolbarSearch.propTypes = {\n  children: PropTypes.node,\n\n  /**\n   * Provide an optional class name for the search container\n   */\n  className: PropTypes.string,\n\n  /**\n   * Provide an optional id for the search container\n   */\n  id: PropTypes.string,\n\n  /**\n   * Provide an optional className for the overal container of the Search\n   */\n  searchContainerClass: PropTypes.string,\n\n  /**\n   * Specifies if the search should expand\n   */\n  expanded: PropTypes.bool,\n\n  /**\n   * Specifies if the search should initially render in an expanded state\n   */\n  defaultExpanded: PropTypes.bool,\n\n  /**\n   * Provide an optional hook that is called each time the input is expanded\n   */\n  onExpand: PropTypes.func,\n\n  /**\n   * Provide an optional hook that is called each time the input is updated\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Provide an optional placeholder text for the Search component\n   */\n  placeHolderText: PropTypes.string,\n\n  /**\n   * Provide an optional label text for the Search component icon\n   */\n  labelText: PropTypes.string,\n\n  /**\n   * Provide an optional default value for the Search component\n   */\n  defaultValue: PropTypes.string,\n\n  /**\n   * Provide custom text for the component for each translation id\n   */\n  translateWithId: PropTypes.func.isRequired,\n\n  /**\n   * Optional prop to specify the tabIndex of the <Search> (in expanded state) or the container (in collapsed state)\n   */\n  tabIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Whether the search should be allowed to expand\n   */\n  persistent: PropTypes.bool,\n  persistant: deprecate(PropTypes.bool, \"\\nThe prop `persistant` for TableToolbarSearch has been deprecated in favor of `persistent`. Please use `persistent` instead.\")\n};\nTableToolbarSearch.defaultProps = {\n  tabIndex: '0',\n  translateWithId: translateWithId,\n  persistent: false\n};\nexport default TableToolbarSearch;","map":null,"metadata":{},"sourceType":"module"}